open Globals
open Utilities
(*cyan left
  blue middle
  magenta right 
 *)
const test : float = 0.5
const kp : float = 0.2
const tp : float =  416.696578277

(*  *)

fun convertMsToRpm(ms : float) returns (rpm : float)
let
  rpm = (60.0 /. (2.0 *. pi *. cD/.100.0)) *. ms
tel

fun convertRpmToDps(rpm : float) returns (dps : float)
let
  dps = rpm *. 6.0
tel

(* PID *)
fun power2(value1 : int) returns (v : int)
let 
  v = value1*value1;
tel 

fun compare_colors(color1,color2 : color) returns (v : float)
let
  v = Mathext.sqrt(Mathext.float(power2(color1.red - color2.red)) +. Mathext.float(power2(color1.green - color2.green)) +. Mathext.float(power2(color1.blue - color2.blue)))
tel


fun getDistances(sens : sensors) returns ( left, middle, right: float)
var mid : color;
let

  mid = {red = Mathext.int((Mathext.float(cyan.red) *. test) +. (Mathext.float(blue.red) *. test)) ; green = Mathext.int((Mathext.float(cyan.green) *. test) +. (Mathext.float(blue.green) *. test))  ; blue = Mathext.int((Mathext.float(cyan.blue) *. test) +. (Mathext.float(blue.blue) *. test)) };
  left = compare_colors(sens.s_road, cyan) ;
  middle = compare_colors(sens.s_road, mid);
  right = compare_colors(sens.s_road, magenta)
tel

fun getDirection(left,middle,right: float) returns ( direction : int)
var min :float;
let
  
  min = min_float(min_float(left,middle),right);
  direction = if (min = left) then 1
              else if (min = middle) then 0
              else if (min = right) then -1
              else 0;
tel 

fun adjustSpeed(speed: float) returns (s:float)
let
  s= max_float(min_float(speed, tp), -.tp);
tel 

fun setMotorSpeed(leftSpeed,rightSpeed : float ) returns (ls,rs : float)  
let
	  ls = if adjustSpeed(leftSpeed) <. 0.0 then (-.1.0) *. (adjustSpeed(leftSpeed)) else adjustSpeed(leftSpeed);
		rs = if adjustSpeed(rightSpeed)<. 0.0 then (-.1.0) *.(adjustSpeed(rightSpeed)) else adjustSpeed(rightSpeed);
tel 


node controller(sens : sensors; iti : itielts)
       returns (rspeed : wheels; arriving : bool)

var 
cpt : int; 
time: float; 
w0,w1,w2,w3,w4,w5,w6 : Debug.world; 
left,mid,right,leftSpeed,rightSpeed,error,turn: float;


let
  cpt = (if true then 1 else 0) + (0 fby cpt);
  time = timestep *. Mathext.float(cpt);
(* 
  rspeed = if time >. (0.47123889803) then { left = (0.0); right = (0.0) } else
  { left = -. tp; right = (tp) }; *)
  (left,mid,right) = (getDistances(sens));
  error =  mid *. Mathext.float(getDirection(left,mid,right));
  turn = (kp *. error);
  (leftSpeed,rightSpeed) = setMotorSpeed(tp +.turn, tp -. turn);
  rspeed = { left = (leftSpeed); right = (rightSpeed) };
  arriving = false;

  w0 = Debug.d_string(Debug.d_init(), "[TEST] \n");
  w1 = Debug.d_int(w0, 0);
  w2 = Debug.d_string(w1, "\n");
  w3 = Debug.d_float(w2, leftSpeed);
  w4 = Debug.d_string(w3, "\n");
  w5 = Debug.d_float(w4, rightSpeed);
  w6 = Debug.d_string(w5, "\n"); 

tel


(*   () = Trace.trace_int("Direction",getDirection(sens));
  () = Trace.trace_float("turn",turn);
  () = Trace.trace_float("error",error);
  () = Trace.trace_float("leftSpeed",leftSpeed);
  () = Trace.trace_float("rightSpeed",rightSpeed); *)